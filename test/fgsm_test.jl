import Theta: fgsm_s

@testset "FGSM" begin
    τ = [0.17012929+3.36021399im 0.42793573+1.65263414im 0.55503983+2.1393021im 0.49182605+2.17345553im 0.93865305+1.81009273im; 0.42793573+1.65263414im 0.87402978+1.33203047im 0.53489381+0.68238397im 0.57601957+1.20509707im 0.50028888+1.11605622im; 0.55503983+2.1393021im 0.53489381+0.68238397im 0.21882206+2.28319153im 0.74421992+1.51352273im 0.41855281+0.87400937im; 0.49182605+2.17345553im 0.57601957+1.20509707im 0.74421992+1.51352273im 0.51070570+1.62305859im 0.52380319+1.15073893im; 0.93865305+1.81009273im 0.50028888+1.11605622im 0.41855281+0.87400937im 0.52380319+1.15073893im 0.79948032+1.38925759im];
    R = RiemannMatrix(τ);
    @test begin
        z = zeros(5);
        theta_constants = [[theta(z, R, char=c) for c in chars_s] for chars_s in fgsm_chars()[1]];
        p = [sqrt(prod(theta_constant)) for theta_constant in theta_constants];
        abs(sum(p)) >= fgsm_s(R, fgsm_chars()[1])
        end
    @test fgsm(τ) == fgsm(R)
#    @test begin
#        F = random_nonfgsm(0.1, 1);
#        (F[2] == 0) | (F[2] < 0.1)
#        end
    @test fgsm_chars()[1][1] == [[[0,0,0,0,0], [0,0,0,0,0]], [[0,0,0,0,0], [1,1,1,1,1]], [[0,0,1,1,0], [0,1,0,0,0]], [[0,0,1,1,0], [1,0,1,1,1]], [[1,1,0,0,0], [0,0,0,1,0]], [[1,1,0,0,0], [1,1,1,0,1]], [[1,1,1,1,0], [0,1,0,1,0]], [[1,1,1,1,0], [1,0,1,0,1]]]
end
